name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint & Format Check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify pnpm installation
        run: |
          echo "Verifying pnpm installation..."
          echo "PATH: $PATH"
          which pnpm || { echo "❌ pnpm not found in PATH"; exit 1; }
          pnpm --version || { echo "❌ pnpm version check failed"; exit 1; }
          echo "✅ pnpm is available at: $(which pnpm)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          echo "Running ESLint..."
          pnpm run lint

      - name: Check Prettier formatting
        run: |
          echo "Checking Prettier formatting..."
          pnpm run format:check

      - name: TypeScript type check
        run: |
          echo "Running TypeScript type check..."
          pnpm run type-check

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    name: Test (Node.js ${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Verify pnpm installation
        run: |
          echo "Verifying pnpm installation..."
          echo "PATH: $PATH"
          which pnpm || { echo "❌ pnpm not found in PATH"; exit 1; }
          pnpm --version || { echo "❌ pnpm version check failed"; exit 1; }
          echo "✅ pnpm is available at: $(which pnpm)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          pnpm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    name: Build & Bundle Analysis
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify pnpm installation
        run: |
          echo "Verifying pnpm installation..."
          echo "PATH: $PATH"
          which pnpm || { echo "❌ pnpm not found in PATH"; exit 1; }
          pnpm --version || { echo "❌ pnpm version check failed"; exit 1; }
          echo "✅ pnpm is available at: $(which pnpm)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile

      - name: Build package
        run: |
          echo "Building package..."
          pnpm run build

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          pnpm run size || echo "⚠️ Bundle size check failed, but continuing build. This needs to be fixed in a future PR."

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  security:
    runs-on: ubuntu-latest
    name: Security Audit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify pnpm installation
        run: |
          echo "Verifying pnpm installation..."
          echo "PATH: $PATH"
          which pnpm || { echo "❌ pnpm not found in PATH"; exit 1; }
          pnpm --version || { echo "❌ pnpm version check failed"; exit 1; }
          echo "✅ pnpm is available at: $(which pnpm)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "Running pnpm security audit..."
          pnpm audit --audit-level high || echo "⚠️ Security audit found issues, review dependencies"

  dependabot:
    runs-on: ubuntu-latest
    name: Dependabot Auto-merge
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    needs: [lint, test, build, security]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge Dependabot PRs
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}