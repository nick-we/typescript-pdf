name: Release

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    name: Release & Publish
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify pnpm installation
        run: |
          echo "Verifying pnpm installation..."
          echo "PATH: $PATH"
          which pnpm || { echo "❌ pnpm not found in PATH"; exit 1; }
          pnpm --version || { echo "❌ pnpm version check failed"; exit 1; }
          echo "✅ pnpm is available at: $(which pnpm)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint & Type Check
        run: |
          pnpm lint
          pnpm type-check

      - name: Run tests
        run: pnpm test:coverage

      - name: Build package
        run: pnpm build

      - name: Verify package contents
        run: |
          ls -la dist/
          npm pack --dry-run

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update pnpm-lock.yaml
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          pnpm install --lockfile-only
          git add pnpm-lock.yaml
          git commit -m "chore: update pnpm-lock.yaml [skip ci]" || exit 0
          git push

  publish-docs:
    runs-on: ubuntu-latest
    name: Deploy Documentation
    needs: release
    if: success()
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify pnpm installation
        run: |
          echo "Verifying pnpm installation..."
          echo "PATH: $PATH"
          which pnpm || { echo "❌ pnpm not found in PATH"; exit 1; }
          pnpm --version || { echo "❌ pnpm version check failed"; exit 1; }
          echo "✅ pnpm is available at: $(which pnpm)"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build documentation
        run: pnpm docs:build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4