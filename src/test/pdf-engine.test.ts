/**
 * Basic PDF Engine Tests
 * 
 * Simple test to verify the PDF engine generates valid output
 * 
 * @packageDocumentation
 */

import { Document } from '../core/document.js';
import { PdfStandardFont } from '../core/pdf/font.js';

describe('PDF Engine Basic Tests', () => {
    test('should create a basic PDF with text', async () => {
        const doc = new Document({ verbose: false });

        const page = doc.addPage({
            width: 612,
            height: 792,
        });

        // Draw some basic content
        page.drawText('Hello, World!', 100, 700, {
            fontSize: 24,
            font: PdfStandardFont.Helvetica,
            color: { red: 0, green: 0, blue: 0 }
        });

        page.drawText('This is a test PDF generated by typescript-pdf', 100, 650, {
            fontSize: 12,
            font: PdfStandardFont.TimesRoman,
            color: { red: 0.2, green: 0.2, blue: 0.8 }
        });

        // Draw a rectangle
        page.drawRect(100, 600, 200, 30, {
            stroke: true,
            fill: false,
            color: { red: 1, green: 0, blue: 0 },
            lineWidth: 2
        });

        const pdfBytes = await doc.save();

        // Basic validation - PDF should start with %PDF- header
        expect(pdfBytes.length).toBeGreaterThan(100);

        const pdfString = new TextDecoder().decode(pdfBytes.slice(0, 20));
        expect(pdfString).toMatch(/^%PDF-1\.[0-9]/);

        // Should end with %%EOF
        const endString = new TextDecoder().decode(pdfBytes.slice(-10));
        expect(endString).toContain('%%EOF');
    });

    test('should create multi-page PDF', async () => {
        const doc = new Document();

        // Page 1
        const page1 = doc.addPage();
        page1.drawText('Page 1', 100, 700, { fontSize: 20 });

        // Page 2
        const page2 = doc.addPage();
        page2.drawText('Page 2', 100, 700, { fontSize: 20 });

        const pdfBytes = await doc.save();

        expect(pdfBytes.length).toBeGreaterThan(200);

        // Should contain page references
        const pdfString = new TextDecoder().decode(pdfBytes);
        expect(pdfString).toContain('/Type /Page');
        expect(pdfString).toContain('/Count 2'); // Two pages
    });

    test('should handle different fonts', async () => {
        const doc = new Document();
        const page = doc.addPage();

        const fonts = [
            PdfStandardFont.Helvetica,
            PdfStandardFont.TimesRoman,
            PdfStandardFont.Courier
        ];

        fonts.forEach((font, index) => {
            page.drawText(`Text in ${font}`, 100, 700 - (index * 30), {
                fontSize: 14,
                font: font
            });
        });

        const pdfBytes = await doc.save();
        const pdfString = new TextDecoder().decode(pdfBytes);

        // Should contain font references
        expect(pdfString).toContain('/Type /Font');
        expect(pdfString).toContain('Helvetica');
        expect(pdfString).toContain('Times-Roman');
        expect(pdfString).toContain('Courier');
    });

    test('should generate valid PDF structure', async () => {
        const doc = new Document();
        const page = doc.addPage();
        page.drawText('Structure test', 100, 100);

        const pdfBytes = await doc.save();
        const pdfString = new TextDecoder().decode(pdfBytes);

        // Check for required PDF structure elements
        expect(pdfString).toContain('%PDF-');
        expect(pdfString).toContain('/Type /Catalog');
        expect(pdfString).toContain('/Type /Pages');
        expect(pdfString).toContain('/Type /Page');
        expect(pdfString).toContain('xref');
        expect(pdfString).toContain('trailer');
        expect(pdfString).toContain('startxref');
        expect(pdfString).toContain('%%EOF');
    });
});